from aiogram import types
from bot.loader import dp
from bot.utils.mysql import db
from bot.loader import bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

async def check_subscribe_channels(user_id):
    global chat_member
    is_subscribed = await db.get_subscribed_op(user_id)
    channels = await db.get_channels_op()
    channels_not_sub = []
    for channel in channels:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel[2], user_id=user_id)
        except Exception as error:
            print(error)
        if chat_member['status'] == 'left':
            channels_not_sub.append(channel)
    if bool(len(channels_not_sub)):
        if is_subscribed == 1:
            await db.change_subscribed_op(user_id, 0)
        await send_subscribe_channels_message(user_id, channels_not_sub)
    if is_subscribed == 0 and not len(channels_not_sub):
        await db.change_subscribed_op(user_id, 1)
    return bool(len(channels_not_sub))


async def send_subscribe_channels_message(user_id, channels_not_sub):
    ikb_channels_op = InlineKeyboardMarkup(row_width=2)
    lang = await db.get_user_lang(user_id)
    for channel in channels_not_sub:
        channel_button = InlineKeyboardButton(text=channel[1], url=channel[3])
        ikb_channels_op.insert(channel_button)
    channel_button_continue = InlineKeyboardButton(text=f'{_("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", lang)}', callback_data='continue_channels_op')
    ikb_channels_op.add(channel_button_continue)
    await bot.send_message(user_id, _('üòî <b>–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã</b>\n\n<i>–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª!</i>', lang), reply_markup=ikb_channels_op)


@dp.callback_query_handler(lambda callback: callback.data == 'continue_channels_op')
async def continue_channels_op(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if not await check_subscribe_channels(callback.from_user.id):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check... –≤—Å—è –ª–æ–≥–∏–∫–∞ –∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        lang = await db.get_user_lang(callback.from_user.id)
        await callback.message.answer(_('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞ –∏/–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, –∏ —è –Ω–∞–π–¥—É —ç—Ç—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é!\n'
                               '/song - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º\n'
                               '/artist - –ø–æ–∏—Å–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º\n'
                               '/setlang - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n'
                               '/settings - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', lang))
    return
